{"version":3,"sources":["popularBooks.js","store/actionTypes.js","store/reducers/popularBooksReducer.js","store/reducers/index.js","store/reducers/searchResults.js","store/store.js","store/actions/fetchPopularBooks.js","store/actions/index.js","store/actions/fetchQueryBook.ts","store/actions/clearSearch.js","components/navbar.js","components/bookCard.js","pages/homepage.js","App.js","serviceWorker.js","index.js"],"names":["PopularBooks","FETCH_POPULAR_BOOKS","FETCH_QUERY_BOOK","CLEAR_SEARCH_RESULTS","popularBooksReducer","state","action","type","payload","reducers","combineReducers","popularBooks","searchResults","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","reduxThunk","a","booksData","i","length","fetch","res","json","data","items","volumeInfo","bookinfo","title","authors","publisher","description","thumbnailLink","imageLinks","thumbnail","canonicalVolumeLink","push","dispatch","fetchPopularBooks","fetchQueryBook","query","map","item","clearSearch","Header","props","isToggled","toggleSearch","bind","triggerSearch","this","setState","event","preventDefault","target","search","value","className","to","location","pathname","id","href","onClick","onSubmit","style","placeholder","required","Component","mapDispatchToProps","actions","connect","BookCard","bookInfo","src","join","split","splice","Homepage","bookData","console","log","Date","now","bookCards","header","time","index","key","class","App","exact","path","component","React","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c55496b.chunk.js","sourcesContent":["const PopularBooks = ['Harry Potter and The Sorcerer\\'s stone','Game of Thrones','The Hobbit','The Warren Buffet Way','The Hunger Games', 'A Brief History of Time'];\r\n\r\n\r\nexport default PopularBooks;","export const FETCH_POPULAR_BOOKS = 'fetch popular books';\r\n\r\nexport const FETCH_QUERY_BOOK = 'fetch query book';\r\n\r\nexport const CLEAR_SEARCH_RESULTS = 'clear search results';","import {FETCH_POPULAR_BOOKS}  from '../actionTypes';\r\n\r\n\r\nfunction popularBooksReducer( state = null, action) {\r\n    //console.log('action payload:',action.payload);\r\n    switch(action.type) {\r\n        case FETCH_POPULAR_BOOKS:\r\n            return action.payload;\r\n        default:            \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default popularBooksReducer;","import { combineReducers } from 'redux';\r\nimport popularBooksReducer from './popularBooksReducer';\r\nimport searchResultsReducer from './searchResults';\r\n\r\n\r\n\r\nvar reducers = combineReducers({ popularBooks : popularBooksReducer, searchResults : searchResultsReducer });\r\n\r\n\r\nexport default reducers;\r\n\r\n","import { FETCH_QUERY_BOOK, CLEAR_SEARCH_RESULTS } from '../actionTypes';\r\n\r\n\r\nexport default function searchResults(state = null, action){\r\n    switch(action.type) {\r\n        case FETCH_QUERY_BOOK:\r\n            return action.payload;\r\n        case CLEAR_SEARCH_RESULTS:\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nvar store = createStore(reducers, composeEnhancers(applyMiddleware(reduxThunk)));\r\n\r\n\r\nexport default store ;\r\n\r\n","\r\nimport PopularBooks from '../../popularBooks';\r\nimport {FETCH_POPULAR_BOOKS} from '../actionTypes';\r\nimport store from '../store';\r\n\r\nasync function fetchPopularBooks() {\r\n    //console.log('action creator fetchpopularbooks called');\r\n    //return async dispatch => {\r\n        var booksData = [];\r\n        for(var i=0; i < PopularBooks.length; i++){\r\n            var res = await fetch('https://www.googleapis.com/books/v1/volumes?q='+PopularBooks[i]);\r\n            var json = await res.json();\r\n            var data = json.items[0].volumeInfo;\r\n\r\n            var bookinfo = { \r\n                title : data.title, \r\n                authors : data.authors, \r\n                publisher : data.publisher,\r\n                description : data.description,\r\n                thumbnailLink : data.imageLinks.thumbnail,\r\n                canonicalVolumeLink : data.canonicalVolumeLink\r\n            };\r\n            \r\n            booksData.push(bookinfo);\r\n        }\r\n        store.dispatch({ type : FETCH_POPULAR_BOOKS, payload : booksData });\r\n    //}\r\n}\r\n\r\nexport default fetchPopularBooks;","import fetchPopularBooks from './fetchPopularBooks';\r\nimport fetchQueryBook from './fetchQueryBook';\r\nimport clearSearch from './clearSearch';\r\n\r\nexport  default { fetchPopularBooks, fetchQueryBook, clearSearch };","import { FETCH_QUERY_BOOK } from '../actionTypes';\r\n\r\n\r\nfunction fetchQueryBook(query:string) {\r\n    return async (dispatch:any) => {\r\n        var res = await fetch('https://www.googleapis.com/books/v1/volumes?q='+query);\r\n        var json = await res.json();\r\n        var data = json.items.map( (item:any) => ( item.volumeInfo && {\r\n            title : item.volumeInfo.title || \"\", \r\n            authors : item.volumeInfo.authors || [], \r\n            publisher : item.volumeInfo.publisher || \"\",\r\n            description : item.volumeInfo.description || \"\",\r\n            thumbnailLink : item.volumeInfo.imageLinks && item.volumeInfo.imageLinks.thumbnail || \"\",\r\n            canonicalVolumeLink : item.volumeInfo.canonicalVolumeLink || \"\"\r\n        } ));\r\n        dispatch({ type : FETCH_QUERY_BOOK, payload : data});\r\n    };\r\n}\r\n\r\nexport default fetchQueryBook;","import {CLEAR_SEARCH_RESULTS} from '../actionTypes';\r\n\r\n\r\nexport default function clearSearch() {\r\n    return dispatch => {\r\n        dispatch({ type : CLEAR_SEARCH_RESULTS});\r\n    } ;\r\n};","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../store/actions';\r\n//import searchicon from '../images/search-icon2.png';\r\nimport 'materialize-css/dist/css/materialize.css';\r\nimport '../styles/navbar.css';\r\n\r\n\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isToggled : false\r\n        };\r\n        this.toggleSearch = this.toggleSearch.bind(this);\r\n        this.triggerSearch = this.triggerSearch.bind(this);\r\n    }\r\n\r\n    toggleSearch() {\r\n        this.setState({isToggled : !this.state.isToggled});\r\n    }\r\n\r\n    triggerSearch(event) {\r\n        event.preventDefault();\r\n        let query = event.target.search.value ;\r\n        this.props.fetchQueryBook(query);\r\n    }\r\n    \r\n    render() {\r\n        var formStyle = {\"border-bottom\":\"1px solid #455a64\"};\r\n        var searchbarStyle = {\"margin\":\"0\",\"height\":\"100%\"};\r\n        return (\r\n            <>\r\n                <nav>\r\n                    <div className=\"nav-wrapper main-navbar  blue-grey darken-4\">\r\n                        <div className=\"logo-div\">\r\n                            <Link className=\"brandLogo\" to={location => { this.props.clearSearch(); return {...location,pathname:\"/\"}}}>\r\n                                Bookstore-Redux\r\n                            </Link>\r\n                            <span className=\"subheader\">A Client Interface for Google Books Api</span>\r\n                        </div>\r\n                        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                            <li><a href=\"#!\"><i className=\"material-icons\" onClick={this.toggleSearch}>search</i></a></li>\r\n                        </ul>                        \r\n                    </div>                                                       \r\n                </nav>\r\n                {this.state.isToggled && \r\n                    <form onSubmit={this.triggerSearch} style={formStyle}>\r\n                        <div className=\"input-field blue-grey darken-2\" style={searchbarStyle}>\r\n                            <input id=\"search\" type=\"search\" placeholder=\"Enter Book Tilte, Author or Keywords to search\" required />\r\n                            <i className=\"material-icons closeIcon\" onClick={this.toggleSearch}>close</i>\r\n                        </div>\r\n                    </form>\r\n                }\r\n                          \r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n// {/* <div className=\"main-navbar\">\r\n//                     <div className=\"app-info\">\r\n//                         <Link to={(location) => { console.log('link fired');this.props.clearSearch(); return {...location,pathname:\"/\"}}}><span className=\"app-name\">Bookstore-Redux</span></Link><br/>\r\n//                         <span className=\"app-developer\">Search Books from Google Books Api.</span>\r\n//                     <img src={searchicon} className=\"search-icon\" onClick={this.toggleSearch}/>\r\n//                     </div>\r\n//                 </div> */}\r\n\r\n\r\n\r\n\r\nvar mapDispatchToProps = {\r\n    fetchQueryBook : actions.fetchQueryBook,\r\n    clearSearch : actions.clearSearch\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps) (Header);","import React, { Component } from 'react';\r\nimport '../styles/bookcard.css';\r\n\r\nclass BookCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {        \r\n        var { title, authors, description, thumbnailLink, publisher, canonicalVolumeLink } = this.props.bookInfo  ;\r\n        return (\r\n        <div className=\"book-card s12 m6 l6 z-depth-4\">\r\n            <div className=\"previewBook\">\r\n                {canonicalVolumeLink && thumbnailLink && <a href={canonicalVolumeLink}><img src={ thumbnailLink } className=\"book-image\" /></a> || <div className=\"no-image-div\"><b>No Image Available</b></div>}\r\n                \r\n            </div>\r\n            <div className=\"volumeInfo\">\r\n                <div className=\"infoContainer\">\r\n                    <table>\r\n                        <tr>\r\n                            <td className=\"field\"><b>Title</b></td>\r\n                            <td className=\"seperator\"><b>:</b></td>\r\n                            <td>{ title &&  title || \"No Title Available\" }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"field\"><b>Authors</b></td>\r\n                            <td className=\"seperator\"><b>:</b></td>\r\n                            <td>{ authors && authors.join(\", \") || \"No Authors Info Available\"}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"field\"><b>Description</b></td>\r\n                            <td className=\"seperator\"><b>:</b></td>\r\n                            <td>{ description && (description.split(\" \").length > 30 ? <> {description.split(\" \").splice(0,30).join(\" \")} <a href={canonicalVolumeLink}>more</a> </> : description ) || \"No Description Available\" }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"field\"><b>Publishers</b></td>\r\n                            <td className=\"seperator\"><b>:</b></td>\r\n                            <td>{ publisher && publisher || \"No Publisher Info Available\"}</td>\r\n                        </tr>\r\n                    </table>\r\n                </div>                \r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BookCard;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport BookCard from '../components/bookCard';\r\nimport 'materialize-css/dist/css/materialize.css';\r\n\r\n\r\nclass Homepage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //this.renderBookCards = this.renderBookCards.bind(this);\r\n    }\r\n\r\n    // componentWillMount() {\r\n    //     this.props.fetchPopularBooks();\r\n    // }\r\n\r\n\r\n    render() {\r\n        var bookData =  this.props.searchResults ||  this.props.popularBooks || [] ;\r\n        console.log('time to get bookData from store:',bookData,' time',Date.now());    \r\n        var bookCards = [] ;\r\n        var header = this.props.searchResults ? <h4 style={{\"margin-left\":\"30px\"}}>Search Results:</h4> : <h4 style={{\"margin-left\":\"30px\"}}>Best Sellers:</h4>;\r\n        \r\n        var time = Date.now();\r\n        bookCards = bookData.map( (bookInfo,index) => <div key={index}><BookCard bookInfo={bookInfo} index={index} /></div>);\r\n        console.log('time to create all cards:',Date.now()-time, ' bookcards:',bookData);\r\n        //console.log('bookData:',bookData,' bookCards:',bookCards);\r\n        return (<div class>\r\n                    {header} \r\n                    <div className=\"row\">\r\n                        { bookCards }\r\n                    </div>                                     \r\n                </div> \r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({popularBooks,searchResults}) {\r\n    return { popularBooks , searchResults};\r\n};\r\n\r\nvar mapDispatchToProps = {\r\n    fetchPopularBooks : actions.fetchPopularBooks\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(Homepage);","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport Header from './components/navbar';\nimport Homepage from './pages/homepage';\nimport './styles/app.css';\n\n\n\n\n\nclass App extends React.Component {\n  render() {\n    return (\n        <BrowserRouter>\n          <Header/>\n          <Route exact path=\"/\" component={Homepage} />\n           \n        </BrowserRouter>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './store/store';\nimport actions from './store/actions';\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>,\ndocument.getElementById('root')\n);\n\nactions.fetchPopularBooks();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}